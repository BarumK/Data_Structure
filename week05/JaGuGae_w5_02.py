"""
-검색 시간 비교
단순 연결 리스트는 찾고자 하는 item을 검색하기 위해 순차 접근을 해야 하므로 O(n)의 시간이 필요
Python 리스트는 인덱스를 이용하여 O(1)의 시간만에 검색
-> 검색 시간 면에선 Python 리스트가 유리.

참고로, 검색 시간과 관리 시간은 Trade-Off 관계에 있다. 한쪽이 오르면 다른 한 쪽은 내려가는 관계
하지만 상황을 잘 확인해야 한다. 상황에 따라 다르다. 위치를 통해 찾는지, 값을 통해 찾는지를 확인해야.
위치를 통해 찾을 경우 -> 리스트는 인덱스를 통해 찾으므로 O(n), 단순 연결 리스트는 순차 접근이므로 O(n)
값을 통해 찾을 경우 -> 리스트는 값을 찾을 때까지 순차 접근하므로 O(n), 단순 연결 리스트는 순차 접근이므로 O(n)
-> 결론: 검색 시간의 효율성은 상황에 따라 다를 수 있음.
    (단, 정렬된 Python 리스트의 검색 성능은 정렬된 단순 연결 리스트의 검색 성능보다 항상 좋음.)

-관리(삽입, 삭제)시간 비교
단순 연결 리스트는 특정 노드의 삽입, 삭제 시 해당 노드와 인접한 노드의 참조만을 변경하면 되므로 O(1)의 시간이 필요
Python 리스트(배열, 동적 배열)는 특정 항목의 삽입,삭제 시 자리 이동을 해야하므로 O(n)의 시간이 필요
삽입, 삭제 면에서 단순 연결 리스트가 유리함

과연 그럴까?
맨 첫 부분에 삽입 혹은 삭제시엔 O(n) vs O(1)이 맞긴 한데, 중간 부분은 말이 조금 달라진다.
중간일 경우 단순 연결 리스트 또한 노드 접근에만 O(n)이 소요된다(순회하기 때문에) 결국 둘 다 O(n)이다.
마지막일 경우에는 상황 역전임. 리스트는 O(1)인데, 단순 연결 리스트는 순차 접근하므로 O(n)임.
-> 결론: 삽입, 삭제 시간의 효율성은 상황에 따라 달라질 수 있음.
"""