"""
-이진 트리의 정의
empty이거나, empty가 아니면 루트 노드와 두 개의 이진 트리인 왼쪽 서브 트리와 오른쪽 서브 트리로 구성된 트리(재귀적 정의)

-이진 트리의 특징
모든 노드의 차수가 2를 넘지 않음 -> 따라서 임의의 노드는 최대 두 개의 자식 노드를 가질 수 있음
자식 노드들의 순서를 구별하지 않는 트리와는 다르게 이진 트리는 자식 노드의 순서를 구별함
이진 트리와 차수가 2인 트리와의 차이점
    이진 트리는 empty인 트리가 존재하지만, 차수가 2인 트리(by Definition)는 empty인 트리가 존재하지 않음
    이진 트리는 서브 트리들의 순서(즉, 자식 노드들의 순서)를 구별하지만, 차수가 2인 트리는 서브 트리들의 순서를 구별하지 않음

-특별한 이진 트리
완벽 이진 트리: 각 내부 노드가 두 개의 자식 노드를 가지는 이진 트리
완전 이진 트리: 마지막 레벨을 제외한 각 레벨이 노드들로 꽉 차있고, 마지막 레벨에는 노드들이 왼쪽부터 빠짐없이 채워진 트리
-> 완벽 이진 트리라면 완전 이진 트리, 역은 성립하지 않음
***참고: 포화 이진 트리랑 완벽 이진 트리랑은 다르다. 포화 이진 트리는 모든 노드가 두개의 자식을 갖던가 아예 자식이 없던가.

-이진 트리의 특징
이진 트리의 레벨 i에 존재할 수 있는 최대 노드의 수는 2^i
높이가 h인 완벽 이진 트리에 존재하는 모든 노드의 수 N = 2^(h + 1) - 1
완벽 이진 트리에 존재하는 노드의 수가 n이라면 해당 트리의 높이 h = log2(N + 1) - 1
높이가 h인 완전 이진 트리에 존재할 수 있는 노드의 수 N은 2^h <= N <= 2^(h + 1) - 1
완전 이진 트리에 존재하는 노드의 수가 N이라면 해당 트리의 높이 h = [log2(N + 1)] - 1 [] -> 올림 기호
이진 트리에 존재하는 노드의 수가 N일 때 해당 트리의 최대 높이 h = N - 1

-이진 트리의 (물리적) 구현
Python 리스트(동적 배열)를 이용한 표현(구현)과 노드들의 참조를 이용하여 연결시키는(연결 리스트의 변형) 구현

-Python 리스트를 이용한 표현
empty인 Python 리스트 T를 생성 후, 아래 그림과 같이 레벨 0(루트 노드)부터 마지막 레벨 순서로 내려가며,
각 레벨에서는 좌에서 우로 트리의 노드들을 append(item)을 이용하여 T[0]부터 차례대로 저장
Python 리스트를 이용하여 표현하면 트리 T에서 특정 노드의 부모 노드와 자식 노드가 어디에 저장되어 있는지(즉, 리스트의 인덱스 값)를 다음과 같은 규칙을 통해 쉽게 알 수 있음
    T[i]에 저장되어 있는 노드의 왼쪽 자식 노드는 T[2 * i + 1]에 위치
    T[i]에 저장되어 있는 노드의 오른쪽 자식 노드는 T[2 * (i + 1)]에 위치
    T[i]에 저장되어 있는 노드의 부모는 T[(i - 1) // 2]에 위치
Python 리스트를 이용하여 편향 이진 트리를 표현할 경우 트리의 높이가 커질수록 메모리 낭비가 심화됨
(단, 완전 이진 트리를 구형할 경우에는 낭비되는 메모리 공간이 전혀 없음)
"""