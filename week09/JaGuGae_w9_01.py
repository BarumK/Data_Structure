"""
-우선순위 큐와 힙
우선순위 큐라는 자료구조를 구현할 때 힙이라는 자료구조를 사용한다.
힙은 트리임. 완전이진트리임.

-우선순위 큐
임의의 기준을 중심으로 가장 높은 우선순위를 가지는 항목의 삭제 및 반환과 임의의 우선순위를 가지는 항목 삽입을 지원하는 자료구조
삽입의 순서 및 방식은 상관이 없고, 우선순위가 가장 높은 우선순위를 가지는 항목을 삭제 및 반환한다.

스택, 큐도 일종의 우선순위 큐이다.
스택은 시간 중심으로 가장 마지막에 삽입된 항목에 가장 높은 우선순위를 부여하는 우선순위 큐이고,
큐는 시간 중심으로 가장 먼저 삽입된 항목에 가장 높은 우선순위를 부여하는 우선순위 큐이다.
    -> 즉 우선순위 큐의 특수한 형태로서 시간에 그 우선순위를 부여한 것. 단순, 극단적으로 시간중심임.
    -> 선형 구조를 사용해서 구현하기 쉬움.

-우선순위 큐의 구현과 enqueue, dequeue 연산의 시간 복잡도 비교
구현                              enqueue                                 dequeue
Python 리스트(동적 배열)            O(1): 첫 항목 삽입                        O(n): 삭제 항목 탐색과 자리 이동
정렬된 동적 배열                    O(n): 삽입 항목 위치 탐색과 자리 이동        O(1): 마지막 항목 삭제 및 반환
정렬된 동적 배열                    O(n): 삽입 위치 탐색                      O(1): (head가 가리키는) 첫 노드 삭제 및 반환
환형 연결 리스트(정렬할 경우)         O(n): 삽입 위치 탐색                      O(1): 마지막 노드 혹은 첫 노드 삭제 및 반환
환형 연결 리스트(정렬하지 않을 경우)   O(1): 마지막 혹은 처음 위치에 노드 삽입      O(n): 삭제 노드 탐색 후 해당 노드 삭제 및 반환
힙(Heap)                          O(logN)                                 O(logN)
-> 무엇으로 구현하든 시간 복잡도 n은 피할 수가 없음.이보다 좋은 것을 만들 수가 없음. 우선순위 때문에 정렬을 해야하기 때문.
   하지만 힙을 이용하면 로그 시간으로 구현할 수 있으므로 압도적인 차이가 남.
   따라서 시간 기준이 아닌 다른 임의의 기준, 특히 대소관계에 의한 우선순위를 선택할 경우 힙을 많이 이용한다.

-힙(Heap)을 이용한 우선순위 큐 구현의 Motivation
우선순위 큐는 현재 우선순위가 가장 높은 항목을 하나씩 삭제 및 반환하는 목적으로 사용
현재 우선순위가 가장 높은 항목을 하나씩 삭제 및 반환할 경우 모든 항목을 정렬시킨 필요가 없음

-힙
완전 이진 트리로서 부모 노드 키 값의 우선순위가 자식 노드 키 값의 우선순위보다 높은 자료구조
    -> 힙은 완전 이진 트리의 형태와 노드의 키 값에 대한 힙의 조건(힙 속성)을 반드시 유지해야 함
힙의 종류: MAX힙(키 값이 큰 항목이 높은 우선순위), MIN힙(키 값이 작은 항목이 높은 우선순위)

-힙의 구현
Python 리스트(동적 배열)로 구현함 -> 완전 이진 트리일 경우 낭비되는 공간이 없음 & 노드가 주어졌을 때 자식, 부모 노드를 구하는 공식 존재
    i번째의 왼쪽 자식 노드: 2 * i +1
    i번째의 오른쪽 자식 노드: 2 * (i + 1)
    i번째의 부모 노드: (i - 1) // 2
    힙의 노드 수가 총 N일 때, 단말 노드는  N // 2 부터 N - 1까지임
"""